// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.2
// source: contextlogic/hello_service/v1/stream.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StreamDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamData *StreamData `protobuf:"bytes,1,opt,name=streamData,proto3" json:"streamData,omitempty"`
}

func (x *StreamDataRequest) Reset() {
	*x = StreamDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contextlogic_hello_service_v1_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDataRequest) ProtoMessage() {}

func (x *StreamDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contextlogic_hello_service_v1_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDataRequest.ProtoReflect.Descriptor instead.
func (*StreamDataRequest) Descriptor() ([]byte, []int) {
	return file_contextlogic_hello_service_v1_stream_proto_rawDescGZIP(), []int{0}
}

func (x *StreamDataRequest) GetStreamData() *StreamData {
	if x != nil {
		return x.StreamData
	}
	return nil
}

type StreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StreamData) Reset() {
	*x = StreamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contextlogic_hello_service_v1_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamData) ProtoMessage() {}

func (x *StreamData) ProtoReflect() protoreflect.Message {
	mi := &file_contextlogic_hello_service_v1_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamData.ProtoReflect.Descriptor instead.
func (*StreamData) Descriptor() ([]byte, []int) {
	return file_contextlogic_hello_service_v1_stream_proto_rawDescGZIP(), []int{1}
}

func (x *StreamData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StreamData) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StreamDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamData *StreamData `protobuf:"bytes,1,opt,name=streamData,proto3" json:"streamData,omitempty"`
}

func (x *StreamDataResponse) Reset() {
	*x = StreamDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contextlogic_hello_service_v1_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDataResponse) ProtoMessage() {}

func (x *StreamDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contextlogic_hello_service_v1_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDataResponse.ProtoReflect.Descriptor instead.
func (*StreamDataResponse) Descriptor() ([]byte, []int) {
	return file_contextlogic_hello_service_v1_stream_proto_rawDescGZIP(), []int{2}
}

func (x *StreamDataResponse) GetStreamData() *StreamData {
	if x != nil {
		return x.StreamData
	}
	return nil
}

var File_contextlogic_hello_service_v1_stream_proto protoreflect.FileDescriptor

var file_contextlogic_hello_service_v1_stream_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x11, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a,
	0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x32, 0xd0,
	0x03, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x42, 0x69,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x3a, 0x01,
	0x2a, 0x28, 0x01, 0x30, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x28, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x30,
	0x01, 0x42, 0x1f, 0x5a, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contextlogic_hello_service_v1_stream_proto_rawDescOnce sync.Once
	file_contextlogic_hello_service_v1_stream_proto_rawDescData = file_contextlogic_hello_service_v1_stream_proto_rawDesc
)

func file_contextlogic_hello_service_v1_stream_proto_rawDescGZIP() []byte {
	file_contextlogic_hello_service_v1_stream_proto_rawDescOnce.Do(func() {
		file_contextlogic_hello_service_v1_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_contextlogic_hello_service_v1_stream_proto_rawDescData)
	})
	return file_contextlogic_hello_service_v1_stream_proto_rawDescData
}

var file_contextlogic_hello_service_v1_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_contextlogic_hello_service_v1_stream_proto_goTypes = []interface{}{
	(*StreamDataRequest)(nil),  // 0: contextlogic.hello_service.v1.StreamDataRequest
	(*StreamData)(nil),         // 1: contextlogic.hello_service.v1.StreamData
	(*StreamDataResponse)(nil), // 2: contextlogic.hello_service.v1.StreamDataResponse
}
var file_contextlogic_hello_service_v1_stream_proto_depIdxs = []int32{
	1, // 0: contextlogic.hello_service.v1.StreamDataRequest.streamData:type_name -> contextlogic.hello_service.v1.StreamData
	1, // 1: contextlogic.hello_service.v1.StreamDataResponse.streamData:type_name -> contextlogic.hello_service.v1.StreamData
	0, // 2: contextlogic.hello_service.v1.Stream.BiDirectStream:input_type -> contextlogic.hello_service.v1.StreamDataRequest
	0, // 3: contextlogic.hello_service.v1.Stream.ClientStream:input_type -> contextlogic.hello_service.v1.StreamDataRequest
	0, // 4: contextlogic.hello_service.v1.Stream.ServerStream:input_type -> contextlogic.hello_service.v1.StreamDataRequest
	2, // 5: contextlogic.hello_service.v1.Stream.BiDirectStream:output_type -> contextlogic.hello_service.v1.StreamDataResponse
	2, // 6: contextlogic.hello_service.v1.Stream.ClientStream:output_type -> contextlogic.hello_service.v1.StreamDataResponse
	2, // 7: contextlogic.hello_service.v1.Stream.ServerStream:output_type -> contextlogic.hello_service.v1.StreamDataResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_contextlogic_hello_service_v1_stream_proto_init() }
func file_contextlogic_hello_service_v1_stream_proto_init() {
	if File_contextlogic_hello_service_v1_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contextlogic_hello_service_v1_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contextlogic_hello_service_v1_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contextlogic_hello_service_v1_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contextlogic_hello_service_v1_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contextlogic_hello_service_v1_stream_proto_goTypes,
		DependencyIndexes: file_contextlogic_hello_service_v1_stream_proto_depIdxs,
		MessageInfos:      file_contextlogic_hello_service_v1_stream_proto_msgTypes,
	}.Build()
	File_contextlogic_hello_service_v1_stream_proto = out.File
	file_contextlogic_hello_service_v1_stream_proto_rawDesc = nil
	file_contextlogic_hello_service_v1_stream_proto_goTypes = nil
	file_contextlogic_hello_service_v1_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	BiDirectStream(ctx context.Context, opts ...grpc.CallOption) (Stream_BiDirectStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Stream_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (Stream_ServerStreamClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) BiDirectStream(ctx context.Context, opts ...grpc.CallOption) (Stream_BiDirectStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/contextlogic.hello_service.v1.Stream/BiDirectStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamBiDirectStreamClient{stream}
	return x, nil
}

type Stream_BiDirectStreamClient interface {
	Send(*StreamDataRequest) error
	Recv() (*StreamDataResponse, error)
	grpc.ClientStream
}

type streamBiDirectStreamClient struct {
	grpc.ClientStream
}

func (x *streamBiDirectStreamClient) Send(m *StreamDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamBiDirectStreamClient) Recv() (*StreamDataResponse, error) {
	m := new(StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Stream_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[1], "/contextlogic.hello_service.v1.Stream/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamClientStreamClient{stream}
	return x, nil
}

type Stream_ClientStreamClient interface {
	Send(*StreamDataRequest) error
	CloseAndRecv() (*StreamDataResponse, error)
	grpc.ClientStream
}

type streamClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamClientStreamClient) Send(m *StreamDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamClientStreamClient) CloseAndRecv() (*StreamDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) ServerStream(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (Stream_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[2], "/contextlogic.hello_service.v1.Stream/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_ServerStreamClient interface {
	Recv() (*StreamDataResponse, error)
	grpc.ClientStream
}

type streamServerStreamClient struct {
	grpc.ClientStream
}

func (x *streamServerStreamClient) Recv() (*StreamDataResponse, error) {
	m := new(StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	BiDirectStream(Stream_BiDirectStreamServer) error
	ClientStream(Stream_ClientStreamServer) error
	ServerStream(*StreamDataRequest, Stream_ServerStreamServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) BiDirectStream(Stream_BiDirectStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectStream not implemented")
}
func (*UnimplementedStreamServer) ClientStream(Stream_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (*UnimplementedStreamServer) ServerStream(*StreamDataRequest, Stream_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_BiDirectStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).BiDirectStream(&streamBiDirectStreamServer{stream})
}

type Stream_BiDirectStreamServer interface {
	Send(*StreamDataResponse) error
	Recv() (*StreamDataRequest, error)
	grpc.ServerStream
}

type streamBiDirectStreamServer struct {
	grpc.ServerStream
}

func (x *streamBiDirectStreamServer) Send(m *StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamBiDirectStreamServer) Recv() (*StreamDataRequest, error) {
	m := new(StreamDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).ClientStream(&streamClientStreamServer{stream})
}

type Stream_ClientStreamServer interface {
	SendAndClose(*StreamDataResponse) error
	Recv() (*StreamDataRequest, error)
	grpc.ServerStream
}

type streamClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamClientStreamServer) SendAndClose(m *StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamClientStreamServer) Recv() (*StreamDataRequest, error) {
	m := new(StreamDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).ServerStream(m, &streamServerStreamServer{stream})
}

type Stream_ServerStreamServer interface {
	Send(*StreamDataResponse) error
	grpc.ServerStream
}

type streamServerStreamServer struct {
	grpc.ServerStream
}

func (x *streamServerStreamServer) Send(m *StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "contextlogic.hello_service.v1.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BiDirectStream",
			Handler:       _Stream_BiDirectStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Stream_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Stream_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contextlogic/hello_service/v1/stream.proto",
}
